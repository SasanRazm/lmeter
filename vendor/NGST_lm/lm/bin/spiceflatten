#!/usr/bin/perl
#
# File:         spiceflatten
# Description:  process subcircuit declaration (.subckt) in SPICE files
#		generated by Xic. 
# Author:       Paul Bunyk
# Created:      Nov 11 1999
# Language:     perl
# Package:      LMeter
# Status:       Experimental
#
# (C) Copyright 1999, Paul Bunyk
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#

# nodes in $preserve_nodes (GND, Power, etc)
# will not be translated
@preserve_nodes = (0);

$newnode = 0; # will store the smallest free node number
$debug = 0;

while (<>)
{
  chop;
  if (/^.subckt\s+(\S+)\s+([ 0-9]+)/) # begin subcircuit
    {
      $name = $1;
      $form_param = $2;
      $debug && print STDERR "SUB $name($form_param)\n";
      $def = "";
      $endname = "";
      while (<>)
	{
	  if (/^.ends\s+(\S+)/)
	    {
	      $endname = $1;
	      last;
	    }
	  $def = $def . $_;
	}
      if ($name ne $endname) 
	{
	  print STDERR "$0: non-matching .subckt names: $name $endname\n";
	}
      else
	{
	  $debug && print STDERR "$def END\n";
	  $subparam{$name} = $form_param;
	  $subdef{$name} = $def;
	}
    }
  else
    {
      # extract nodes and update $newnode
      if (/^\S+\s+([0-9\s]+)\s+(.*)/)
	{
	  @nodes = split(/\s/,$1);
	}
      foreach $i (@nodes)
	{
	  $newnode = $i+1 if ($i >= $newnode);
	}
      # decide what to do with an element card
      if (/^X/) # subcircuit call 
	{
	  push(@calls,$_);
	}
      else # regular card, print it
	{
	  print "$_\n";
	}
    }
}

$debug && print STDERR "New nodes start at $newnode\n";

# now for each X card in @calls expand its definition

for (@calls)
  {
    if (/^X([0-9]+)\s([ 0-9]+)\s(\S+)/)
      {
	$instnum = $1;
	@fact_param = split(/\s/,$2);
	$name = $3;
	$debug && print STDERR "X$instnum (@fact_param) = $name\n";
	$def = $subdef{$name};
	die "Undefined .subskt $name\n" 
	  if ($def eq "");
	@form_param = split(/\s/,$subparam{$name});
	die "Mismatched parameter number for .subskt $name\n"
	  if (($len = $#form_param) != $#fact_param);
	# make mapping $form_param -> $fact_param 
	%map = ();	
	for ($i=0; $i<=$len; $i++)
	  {
	    $form = $form_param[$i];
	    $fact = $fact_param[$i];
	    $map{$form} = $fact;
	    $debug && print STDERR "$form -> $fact\n";
	  }
	for (split(/\n/,$def)) # for all lines in $def
	{
	  # parse element
	  if (/^(\S+)\s+([0-9\s]+)\s+(.*)/)
	    {
	      $elt = $1;
	      @nodes = split(/\s/,$2);
	      $tail = $3;
	      $debug && print STDERR "$elt(@nodes) $tail\n";
	    }
	  else
	    {
	      print STDERR "$0: Bad SPICE card: $_\n";
	      next;
	    }
	  # translate @nodes
	  $len = $#nodes;
	  NODE: 
	  for ($i=0; $i<=$len; $i++)
	    {
	      $node = $nodes[$i];
	      foreach $p (@preserve_nodes) # should it be preserved?
		{
		  next NODE if ($node == $p);
		}
	      # map a new node unless mapping is already here
	      $map{$node} = $newnode++ unless (defined($map{$node}));
	      $node = $map{$node};
	      $debug && print STDERR $nodes[$i], " -> ",$node,"\n";
	      $nodes[$i] = $node;
	    }
	  # produce a new card
	  $card = "$elt$instnum @nodes $tail";
	  if ($card =~ /^X/) # sub-sub-circuit
	    {
	      push(@calls,$card);
	    }
	  else
	    {
	      print $card,"\n";
	    }
	}
      }
    else
      {
	print STDERR "$0: Bad SPICE card: $_\n";
      }
  }

